# .github/workflows/main.yml (ÊàñÊÇ®ÁöÑÂ∑•‰ΩúÊµÅÊñá‰ª∂Âêç)

name: Check for Modpack Updates

on:
  schedule:
    # ÊØèÂ§©Âåó‰∫¨Êó∂Èó¥6ÁÇπËøêË°å (UTC 22:00)
    - cron: '0 22 * * *'
  # ÂÖÅËÆ∏Âú® Actions È°µÈù¢ÊâãÂä®Ëß¶Âèë
  workflow_dispatch:

jobs:
  # JOB 1: Check for updates, update files in repo, create the PR
  update-and-create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      local_version_id: ${{ steps.checker.outputs.local_version_id }}
      new_version_id: ${{ steps.checker.outputs.new_version_id }}
      pack_id: ${{ steps.read_config.outputs.pack_id }}
      pack_name: ${{ steps.checker.outputs.pack_name }}
      new_version: ${{ steps.checker.outputs.new_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3'

      - name: Install Python dependencies
        run: pip install requests

      - name: Read Pack ID from config
        id: read_config
        run: |
          PACK_ID=$(jq -r '.packId' .github/configs/modpack.json)
          echo "pack_id=$PACK_ID" >> $GITHUB_OUTPUT

      - name: Run Update Checker Script
        id: checker
        env:
          # IMPORTANT: Store your CurseForge API Key in repository secrets
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
        run: python .github/scripts/update_checker.py

      - name: Create Pull Request if changes were detected
        id: create_pr
        if: steps.checker.outputs.changes_detected == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ‰ªéËÑöÊú¨ÁöÑËæìÂá∫‰∏≠Ëé∑ÂèñÂèòÈáè
          PACK_NAME=$(echo "${{ steps.checker.outputs.pack_name }}")
          NEW_VERSION=$(echo "${{ steps.checker.outputs.new_version }}")
          BRANCH_NAME="autoupdate/${PACK_NAME}-${NEW_VERSION}"
          BRANCH_NAME=$(echo "$BRANCH_NAME" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          PR_TITLE="chore(autoupdate): Update ${PACK_NAME} to v${NEW_VERSION}"

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout -b $BRANCH_NAME
          git add -A ${{ steps.checker.outputs.info_file_path }}
          git add -A ${{ steps.checker.outputs.source_dir }}
          git commit -m "$PR_TITLE"
          git push --force -u origin $BRANCH_NAME

          # Create PR and capture its number
          PR_URL=$(gh pr create \
            --base main \
            --head $BRANCH_NAME \
            --title "$PR_TITLE" \
            --body-file "pr_body.md")
          
          PR_NUMBER=$(echo "$PR_URL" | awk -F'/' '{print $NF}')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Pull Request #${PR_NUMBER} created."

  # JOB 2: Generate diff report and post it as a comment
  generate-diff-report:
    runs-on: ubuntu-latest
    needs: update-and-create-pr
    permissions:
      pull-requests: write # Needed for posting the comment
    if: needs.update-and-create-pr.outputs.pr_number && needs.update-and-create-pr.outputs.local_version_id && needs.update-and-create-pr.outputs.new_version_id

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3'

      - name: Download old and new archives using CurseForge API
        env:
          # IMPORTANT: Store your CurseForge API Key in repository secrets
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
        run: |
          PACK_ID="${{ needs.update-and-create-pr.outputs.pack_id }}"
          LOCAL_ID="${{ needs.update-and-create-pr.outputs.local_version_id }}"
          NEW_ID="${{ needs.update-and-create-pr.outputs.new_version_id }}"
          
          echo "Fetching download URL for old version (ID: $LOCAL_ID)..."
          OLD_DL_URL=$(curl -s -H "x-api-key: $CF_API_KEY" "https://api.curseforge.com/v1/mods/$PACK_ID/files/$LOCAL_ID" | jq -r .data.downloadUrl)
          if [ -z "$OLD_DL_URL" ] || [ "$OLD_DL_URL" == "null" ]; then
            echo "::error::Failed to get download URL for old version ID $LOCAL_ID"
            exit 1
          fi
          echo "Downloading old version..."
          curl -L -o ./old_version.zip "$OLD_DL_URL"
          
          echo "Fetching download URL for new version (ID: $NEW_ID)..."
          NEW_DL_URL=$(curl -s -H "x-api-key: $CF_API_KEY" "https://api.curseforge.com/v1/mods/$PACK_ID/files/$NEW_ID" | jq -r .data.downloadUrl)
           if [ -z "$NEW_DL_URL" ] || [ "$NEW_DL_URL" == "null" ]; then
            echo "::error::Failed to get download URL for new version ID $NEW_ID"
            exit 1
          fi
          echo "Downloading new version..."
          curl -L -o ./new_version.zip "$NEW_DL_URL"

      - name: Generate Diff Report
        run: |
          python .github/scripts/compare_archives.py old_version.zip new_version.zip -o diff_report.html

      - name: Compress Diff Report
        run: zip diff_report.zip diff_report.html

      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: diff-report-pr-${{ needs.update-and-create-pr.outputs.pr_number }}
          path: diff_report.zip
          retention-days: 7

      - name: Post Link to PR Comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.update-and-create-pr.outputs.pr_number }}
          RUN_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        run: |
          COMMENT_BODY="üì¶ **ÁâàÊú¨Èó¥Â∑ÆÂºÇÊä•ÂëäÂ∑≤ÁîüÊàê„ÄÇ**Áî±‰∫éÊä•ÂëäÊñá‰ª∂ËøáÂ§ßÔºåÂ∑≤Â∞ÜÂÖ∂ÂéãÁº©Âπ∂‰Ωú‰∏∫Â∑•‰ΩúÊµÅ‰∫ßÁâ©‰∏ä‰º†„ÄÇ‚û°Ô∏è **[ÁÇπÊ≠§‰∏ãËΩΩÂ∑ÆÂºÇÊä•Âëä (diff_report.zip)]($RUN_URL)**"
          gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
          echo "Link to diff report posted in PR #${PR_NUMBER}."